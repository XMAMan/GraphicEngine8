#version 330 core

uniform mat4 CameraMatrix;
uniform mat4 NormalMatrix;

uniform sampler2D Texture0;	// Farbtextur
uniform sampler2D Texture1; // Bumpmap
uniform samplerCube Cubemap;// Für Reflektion
uniform sampler2D ShadowMap;// Shadowmapping
uniform int UseTexture0; 
uniform int UseTexture1; 
uniform int LightingIsEnabled; 
uniform int UseCubemap; 
uniform int UseShadowmap;
uniform int DoFlatShading;
uniform int BlendingWithBlackColor;
uniform vec4 color;
uniform int CullFaceIsEnabled;
uniform vec3 CameraPosition;

//varying vec3 normal, posWorld, tangent;
//varying vec4 ShadowCoord;

noperspective in vec3 normal;
smooth in vec3 posWorld;
noperspective in vec3 tangent;
smooth in vec2	textcoord;
smooth in vec4 ShadowCoord;


#COMMONFUNCTIONS#

void main()
{
	vec4 objektColor = color * (1.0 - UseTexture0) + vec4(texture2D(Texture0, textcoord.xy)) * UseTexture0 * color;	
	//gl_FragColor = vec4(textcoord.x, textcoord.y, 0, 1); return;

	vec3 normalVector = normalize(normal);
	if (DoFlatShading == 1) normalVector = normalize(cross(dFdx(posWorld.xyz), dFdy(posWorld.xyz)));

	//gl_FragColor = vec4(normalVector.x, normalVector.y, normalVector.z, 1); return;
	

	if (BlendingWithBlackColor == 1 && (objektColor.x + objektColor.y + objektColor.z) < 0.1) discard; 
	if (BlendingWithBlackColor == 1) objektColor.w = 1;

	if (UseTexture1 == 1)
	{
		//vec4 bumptex = vec4(texture2D(Texture1, gl_TexCoord[0].st));
		//float acol = bumptex.a;
		//float rcol = bumptex.r;// / acol;
		//float gcol = bumptex.g;// / acol;
		//float bcol = bumptex.b;// / acol;

		//vec3 bumpNormal = NormalSampleToWorldSpace(clamp(vec3(rcol, gcol, bcol),0,1), normal, tangent);
		//normalVector = bumpNormal;

		normalVector = NormalSampleToWorldSpace(ReadBumpNormalFromTexture(textcoord), normalize(normal), normalize(tangent));
	}

	if (LightingIsEnabled == 0)
	{
		gl_FragColor = objektColor;
	}else
	{	
		gl_FragColor = vec4(GetIlluminatedColor(posWorld, normalVector, objektColor).xyz, objektColor.w);
		
	}

	if (UseCubemap == 1)
	{
		vec3 ReflectDir = normalize(reflect(posWorld - CameraPosition, normalVector));  //In is incident vector
		ReflectDir = normalize(mat3(transpose(NormalMatrix)) * ReflectDir).xyz;
		//gl_FragColor = vec4(ReflectDir.x, ReflectDir.y, ReflectDir.z, 1); return;
		
		vec4 col1 = gl_FragColor;
		vec4 col2 = texture(Cubemap, ReflectDir);
		vec4 c = color;
		gl_FragColor = vec4(col1.x * (1- c.x) + col2.x * c.x, col1.y * (1- c.y) + col2.y * c.y, col1.z * (1- c.z) + col2.z * c.z, c.w);
		//gl_FragColor = gl_FragColor * 0.8 + texture(Cubemap, ReflectDir) * 0.2;	
	}

	float visibility = 1.0;	

	if (UseShadowmap == 1)
	{
		vec4 shadowCoord = ShadowCoord / ShadowCoord.w;
		
		//float bias = 0.0001f;
		float bias = max(0.001 * (1.0 - dot(normalVector, normalize(lightStruct.LightPositions[0].xyz - posWorld))), 0.0001); 

		if (shadowCoord.z < 1 && vec4(texture2D(ShadowMap, shadowCoord.xy)).r  <  shadowCoord.z - bias)
		{
			visibility = 0.5;

			//visibility = abs(vec4(texture2D(ShadowMap, shadowCoord.xy)).z) * 1000;
		}

		if (shadowCoord.x < 0 ||shadowCoord.y < 0 || shadowCoord.x > 1 ||shadowCoord.y > 1)
		{
			visibility = 1.0;		
		}
	}

	gl_FragColor = gl_FragColor * visibility;

	//float a = texture2D(Texture1, gl_TexCoord[0].st).a;
	
	//gl_FragColor = vec4(texture2D(Texture0, gl_TexCoord[0].st).xyz,1);
	//gl_FragColor.w = objektColor.w;
	//gl_Color.w = 1;
	//gl_FragColor = vec4(texture2D(Texture0, gl_TexCoord[0].st).xyz,1) * UseTexture0 * gl_Color;	
	
}